version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: fastapi-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: fastapi_micro_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - fastapi-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d fastapi_micro_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: fastapi-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - fastapi-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: fastapi-zookeeper
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    networks:
      - fastapi-network
    healthcheck:
      test: ["CMD-SHELL", "echo ruok | nc localhost 2181"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Kafka
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: fastapi-kafka
    restart: unless-stopped
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_DELETE_TOPIC_ENABLE: "true"
    ports:
      - "9092:9092"
      - "9101:9101"
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - fastapi-network
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Kafka UI
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: fastapi-kafka-ui
    restart: unless-stopped
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    ports:
      - "8080:8080"
    networks:
      - fastapi-network

  # API Gateway
  api-gateway:
    build:
      context: .
      dockerfile: Dockerfile.gateway
    container_name: fastapi-api-gateway
    restart: unless-stopped
    environment:
      # Database Configuration
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: fastapi_micro_db
      DB_USER: postgres
      DB_PASSWORD: password
      # Redis Configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_DB: 0
      # Kafka Configuration
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      # Application Configuration
      HOST: 0.0.0.0
      PORT: 8000
      # Python Configuration
      PYTHONPATH: /app
      PYTHONUNBUFFERED: 1
    ports:
      - "8000:8000"
    volumes:
      - ./gateway:/app/gateway:ro
      - ./src:/app/src:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - fastapi-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # User Service
  user-service:
    build:
      context: .
      dockerfile: Dockerfile.service
    container_name: fastapi-user-service
    restart: unless-stopped
    environment:
      # Database Configuration
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: fastapi_micro_db
      DB_USER: postgres
      DB_PASSWORD: password
      # Redis Configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_DB: 0
      # Kafka Configuration
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      # Application Configuration
      HOST: 0.0.0.0
      PORT: 8001
      # Python Configuration
      PYTHONPATH: /app
      PYTHONUNBUFFERED: 1
    ports:
      - "8001:8001"
    volumes:
      - ./services/user-service:/app/services/user-service:ro
      - ./src:/app/src:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - fastapi-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Task Service
  task-service:
    build:
      context: .
      dockerfile: Dockerfile.service
    container_name: fastapi-task-service
    restart: unless-stopped
    environment:
      # Database Configuration
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: fastapi_micro_db
      DB_USER: postgres
      DB_PASSWORD: password
      # Redis Configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_DB: 0
      # Kafka Configuration
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      # Application Configuration
      HOST: 0.0.0.0
      PORT: 8002
      # Python Configuration
      PYTHONPATH: /app
      PYTHONUNBUFFERED: 1
    ports:
      - "8002:8002"
    volumes:
      - ./services/task-service:/app/services/task-service:ro
      - ./src:/app/src:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - fastapi-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Notification Service
  notification-service:
    build:
      context: .
      dockerfile: Dockerfile.service
    container_name: fastapi-notification-service
    restart: unless-stopped
    environment:
      # Database Configuration
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: fastapi_micro_db
      DB_USER: postgres
      DB_PASSWORD: password
      # Redis Configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_DB: 0
      # Kafka Configuration
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      # Application Configuration
      HOST: 0.0.0.0
      PORT: 8003
      # Python Configuration
      PYTHONPATH: /app
      PYTHONUNBUFFERED: 1
    ports:
      - "8003:8003"
    volumes:
      - ./services/notification-service:/app/services/notification-service:ro
      - ./src:/app/src:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - fastapi-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Legacy FastAPI App (for backward compatibility)
  fastapi-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: fastapi-micro-legacy
    restart: unless-stopped
    environment:
      # Database Configuration
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: fastapi_micro_db
      DB_USER: postgres
      DB_PASSWORD: password
      # Redis Configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_DB: 0
      # Application Configuration
      HOST: 0.0.0.0
      PORT: 8004
      # Python Configuration
      PYTHONPATH: /app
      PYTHONUNBUFFERED: 1
    ports:
      - "8004:8004"
    volumes:
      - ./src:/app/src:ro
      - ./alembic:/app/alembic:ro
      - ./alembic.ini:/app/alembic.ini:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - fastapi-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health/db"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    command: >
      sh -c "poetry run alembic upgrade head &&
             poetry run uvicorn main:app --host 0.0.0.0 --port 8004 --reload"

volumes:
  postgres_data:
  redis_data:
  zookeeper_data:
  zookeeper_logs:
  kafka_data:

networks:
  fastapi-network:
    driver: bridge
